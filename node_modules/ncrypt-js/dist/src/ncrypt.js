"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
class Ncrypt {
    /**
     * object constructor
     * @param text
     * @param secret
     */
    constructor(secret) {
        /**
         * convert all entered text to decimal equivalent character codes
         * @param {data.<string>} data to be converted
         * @return {Array.<number>} array of character codes
         */
        this.convertTextToDecimal = (data) => data.split('').map((value) => value.charCodeAt(0));
        /**
         * encode provided secret on decimal character codes
         * @param {charCode<number[], *>} character codes
         */
        this.applySecretToCharacters = (charCodes) => this.convertTextToDecimal(this.secret)
            .reduce((firstValue, secondValue) => (firstValue ^ secondValue), charCodes);
        /**
         * convert character bytes to hexadecimal equivalent
         * @param {number.<number>}
         * @returns {string} hexadecimal string
         */
        this.convertByteToHexadecimal = (number) => {
            return ("0" + Number(number).toString(16)).substr(-2);
        };
        /**
         * process data to be encrypted
         * @param {}
         * @returns {string.<string>} encoded string data
         */
        this.encrypt = (data) => {
            /**
             * this does the actual processing return a string
             * resulting from charCode conversion, salting and
             * hexadecimal mapping
             *
             */
            // if (data == void 0) throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');
            try {
                const encodedMessage = JSON.stringify(data).split('')
                    .map(this.convertTextToDecimal)
                    .map(this.applySecretToCharacters)
                    .map(this.convertByteToHexadecimal)
                    .join('');
                return utils_1.encode(encodedMessage);
            }
            catch (error) {
                throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');
            }
        };
        /**
         * decodes encoded string resulting from util encryption
         * @param {string.<stirng>} encodeData
         * @returns {decodedData.<string>} decoded data
         */
        this.decrypt = (text) => {
            const encodeData = utils_1.decode(text);
            const data = encodeData.match(/.{1,2}/g)
                .map((hex) => parseInt(hex, 16))
                .map(this.applySecretToCharacters)
                .map((charCode) => String.fromCharCode(charCode))
                .join('');
            const arr = [];
            arr.push(data);
            return JSON.parse(data);
        };
        this.secret = secret;
    }
}
exports.default = Ncrypt;
//# sourceMappingURL=ncrypt.js.map